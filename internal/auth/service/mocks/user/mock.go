// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xw1nchester/kushfinds-backend/internal/auth/service (interfaces: UserService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/user/mock.go -package=mockuserservice . UserService
//

// Package mockuserservice is a generated GoMock package.
package mockuserservice

import (
	context "context"
	reflect "reflect"

	user "github.com/xw1nchester/kushfinds-backend/internal/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CheckUsernameIsAvailable mocks base method.
func (m *MockUserService) CheckUsernameIsAvailable(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsernameIsAvailable", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUsernameIsAvailable indicates an expected call of CheckUsernameIsAvailable.
func (mr *MockUserServiceMockRecorder) CheckUsernameIsAvailable(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsernameIsAvailable", reflect.TypeOf((*MockUserService)(nil).CheckUsernameIsAvailable), ctx, username)
}

// Create mocks base method.
func (m *MockUserService) Create(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserServiceMockRecorder) Create(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserService)(nil).Create), ctx, email)
}

// GetByEmail mocks base method.
func (m *MockUserService) GetByEmail(ctx context.Context, email string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServiceMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserService)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockUserService) GetByID(ctx context.Context, id int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserService)(nil).GetByID), ctx, id)
}

// SetPassword mocks base method.
func (m *MockUserService) SetPassword(ctx context.Context, id int, passwordHash []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, id, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockUserServiceMockRecorder) SetPassword(ctx, id, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockUserService)(nil).SetPassword), ctx, id, passwordHash)
}

// SetProfileInfo mocks base method.
func (m *MockUserService) SetProfileInfo(ctx context.Context, data *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProfileInfo", ctx, data)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProfileInfo indicates an expected call of SetProfileInfo.
func (mr *MockUserServiceMockRecorder) SetProfileInfo(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProfileInfo", reflect.TypeOf((*MockUserService)(nil).SetProfileInfo), ctx, data)
}

// Verify mocks base method.
func (m *MockUserService) Verify(ctx context.Context, id int) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockUserServiceMockRecorder) Verify(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockUserService)(nil).Verify), ctx, id)
}
