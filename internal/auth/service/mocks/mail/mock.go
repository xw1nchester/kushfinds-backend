// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xw1nchester/kushfinds-backend/internal/auth/service (interfaces: MailManager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mail/mock.go -package=mockmail . MailManager
//

// Package mockmail is a generated GoMock package.
package mockmail

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailManager is a mock of MailManager interface.
type MockMailManager struct {
	ctrl     *gomock.Controller
	recorder *MockMailManagerMockRecorder
	isgomock struct{}
}

// MockMailManagerMockRecorder is the mock recorder for MockMailManager.
type MockMailManagerMockRecorder struct {
	mock *MockMailManager
}

// NewMockMailManager creates a new mock instance.
func NewMockMailManager(ctrl *gomock.Controller) *MockMailManager {
	mock := &MockMailManager{ctrl: ctrl}
	mock.recorder = &MockMailManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailManager) EXPECT() *MockMailManagerMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockMailManager) SendMail(subject, body string, to []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", subject, body, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockMailManagerMockRecorder) SendMail(subject, body, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockMailManager)(nil).SendMail), subject, body, to)
}
