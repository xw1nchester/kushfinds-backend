// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xw1nchester/kushfinds-backend/internal/auth/service (interfaces: PasswordManager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/password/mock.go -package=mockpassword . PasswordManager
//

// Package mockpassword is a generated GoMock package.
package mockpassword

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
	isgomock struct{}
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockPasswordManager) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockPasswordManagerMockRecorder) CompareHashAndPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockPasswordManager)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GenerateHashFromPassword mocks base method.
func (m *MockPasswordManager) GenerateHashFromPassword(password []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashFromPassword", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashFromPassword indicates an expected call of GenerateHashFromPassword.
func (mr *MockPasswordManagerMockRecorder) GenerateHashFromPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashFromPassword", reflect.TypeOf((*MockPasswordManager)(nil).GenerateHashFromPassword), password)
}
