// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xw1nchester/kushfinds-backend/internal/auth/service (interfaces: CodeService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/code/mock.go -package=mockcodeservice . CodeService
//

// Package mockcodeservice is a generated GoMock package.
package mockcodeservice

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeService is a mock of CodeService interface.
type MockCodeService struct {
	ctrl     *gomock.Controller
	recorder *MockCodeServiceMockRecorder
	isgomock struct{}
}

// MockCodeServiceMockRecorder is the mock recorder for MockCodeService.
type MockCodeServiceMockRecorder struct {
	mock *MockCodeService
}

// NewMockCodeService creates a new mock instance.
func NewMockCodeService(ctrl *gomock.Controller) *MockCodeService {
	mock := &MockCodeService{ctrl: ctrl}
	mock.recorder = &MockCodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeService) EXPECT() *MockCodeServiceMockRecorder {
	return m.recorder
}

// GenerateVerify mocks base method.
func (m *MockCodeService) GenerateVerify(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateVerify", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateVerify indicates an expected call of GenerateVerify.
func (mr *MockCodeServiceMockRecorder) GenerateVerify(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateVerify", reflect.TypeOf((*MockCodeService)(nil).GenerateVerify), ctx, userID)
}

// ValidateVerify mocks base method.
func (m *MockCodeService) ValidateVerify(ctx context.Context, code string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateVerify", ctx, code, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateVerify indicates an expected call of ValidateVerify.
func (mr *MockCodeServiceMockRecorder) ValidateVerify(ctx, code, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateVerify", reflect.TypeOf((*MockCodeService)(nil).ValidateVerify), ctx, code, userID)
}
