// Code generated by MockGen. DO NOT EDIT.
// Source: middleware.go
//
// Generated by this command:
//
//	mockgen -source=middleware.go -destination=mocks/mock.go -package=mockjwt
//

// Package mockjwt is a generated GoMock package.
package mockjwt

import (
	reflect "reflect"

	jwtauth "github.com/xw1nchester/kushfinds-backend/internal/auth/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtManager is a mock of JwtManager interface.
type MockJwtManager struct {
	ctrl     *gomock.Controller
	recorder *MockJwtManagerMockRecorder
	isgomock struct{}
}

// MockJwtManagerMockRecorder is the mock recorder for MockJwtManager.
type MockJwtManagerMockRecorder struct {
	mock *MockJwtManager
}

// NewMockJwtManager creates a new mock instance.
func NewMockJwtManager(ctrl *gomock.Controller) *MockJwtManager {
	mock := &MockJwtManager{ctrl: ctrl}
	mock.recorder = &MockJwtManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtManager) EXPECT() *MockJwtManagerMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockJwtManager) ParseToken(tokenStr string) (*jwtauth.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenStr)
	ret0, _ := ret[0].(*jwtauth.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockJwtManagerMockRecorder) ParseToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockJwtManager)(nil).ParseToken), tokenStr)
}
