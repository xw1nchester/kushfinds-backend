// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=mocks/mock.go -package=mockauthservice
//

// Package mockauthservice is a generated GoMock package.
package mockauthservice

import (
	context "context"
	reflect "reflect"

	auth "github.com/xw1nchester/kushfinds-backend/internal/auth"
	user "github.com/xw1nchester/kushfinds-backend/internal/user"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockService) GetUserByEmail(ctx context.Context, dto auth.EmailRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, dto)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockServiceMockRecorder) GetUserByEmail(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockService)(nil).GetUserByEmail), ctx, dto)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, dto auth.EmailPasswordRequest, userAgent string) (*auth.AuthFullResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, dto, userAgent)
	ret0, _ := ret[0].(*auth.AuthFullResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, dto, userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, dto, userAgent)
}

// Logout mocks base method.
func (m *MockService) Logout(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockServiceMockRecorder) Logout(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockService)(nil).Logout), ctx, token)
}

// Refresh mocks base method.
func (m *MockService) Refresh(ctx context.Context, token, userAgent string) (*auth.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, token, userAgent)
	ret0, _ := ret[0].(*auth.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockServiceMockRecorder) Refresh(ctx, token, userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockService)(nil).Refresh), ctx, token, userAgent)
}

// RegisterEmail mocks base method.
func (m *MockService) RegisterEmail(ctx context.Context, dto auth.EmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEmail", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterEmail indicates an expected call of RegisterEmail.
func (mr *MockServiceMockRecorder) RegisterEmail(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEmail", reflect.TypeOf((*MockService)(nil).RegisterEmail), ctx, dto)
}

// RegisterVerify mocks base method.
func (m *MockService) RegisterVerify(ctx context.Context, dto auth.CodeRequest, userAgent string) (*auth.AuthFullResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVerify", ctx, dto, userAgent)
	ret0, _ := ret[0].(*auth.AuthFullResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVerify indicates an expected call of RegisterVerify.
func (mr *MockServiceMockRecorder) RegisterVerify(ctx, dto, userAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVerify", reflect.TypeOf((*MockService)(nil).RegisterVerify), ctx, dto, userAgent)
}

// SavePassword mocks base method.
func (m *MockService) SavePassword(ctx context.Context, userID int, dto auth.PasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePassword", ctx, userID, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePassword indicates an expected call of SavePassword.
func (mr *MockServiceMockRecorder) SavePassword(ctx, userID, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePassword", reflect.TypeOf((*MockService)(nil).SavePassword), ctx, userID, dto)
}

// SaveProfileInfo mocks base method.
func (m *MockService) SaveProfileInfo(ctx context.Context, userID int, dto auth.ProfileRequest) (*user.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfileInfo", ctx, userID, dto)
	ret0, _ := ret[0].(*user.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfileInfo indicates an expected call of SaveProfileInfo.
func (mr *MockServiceMockRecorder) SaveProfileInfo(ctx, userID, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfileInfo", reflect.TypeOf((*MockService)(nil).SaveProfileInfo), ctx, userID, dto)
}

// VerifyResend mocks base method.
func (m *MockService) VerifyResend(ctx context.Context, dto auth.EmailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResend", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyResend indicates an expected call of VerifyResend.
func (mr *MockServiceMockRecorder) VerifyResend(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResend", reflect.TypeOf((*MockService)(nil).VerifyResend), ctx, dto)
}
